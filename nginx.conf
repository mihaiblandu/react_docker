events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # SSL optimization
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    
    # Modern cipher configuration
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    server {
        # HTTP/3
        listen 443 quic reuseport;
        # HTTP/2 and HTTP/1.1
        listen 443 ssl;
        http2 on;
        
        server_name domain.me www.domain.me;
        
        # SSL certificates
        ssl_certificate     /etc/nginx/ssl/domain.me.pem;
        ssl_certificate_key /etc/nginx/ssl/domain.me-key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_early_data on;
        
        # HTTP/3 advertisement
        add_header Alt-Svc 'h3=":443"; ma=86400' always;
        add_header QUIC-Status $http3;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        location / {
            # Example: serve static files
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # Or proxy to another service
            # proxy_pass http://backend;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name domain.me www.domain.me;
        return 301 https://$server_name$request_uri;
    }
    
    # Redirect www to non-www (optional)
    server {
        listen 443 ssl http2;
        server_name www.domain.me;
        
        ssl_certificate     /etc/nginx/ssl/domain.me.pem;
        ssl_certificate_key /etc/nginx/ssl/domain.me-key.pem;
        
        return 301 https://domain.me$request_uri;
    }
}